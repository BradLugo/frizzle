// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import frizzle "github.com/qntfy/frizzle"
import mock "github.com/stretchr/testify/mock"

// Source is an autogenerated mock type for the Source type
type Source struct {
	mock.Mock
}

// Ack provides a mock function with given fields: m
func (_m *Source) Ack(m frizzle.Msg) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(frizzle.Msg) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Source) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fail provides a mock function with given fields: m
func (_m *Source) Fail(m frizzle.Msg) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(frizzle.Msg) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Receive provides a mock function with given fields:
func (_m *Source) Receive() <-chan frizzle.Msg {
	ret := _m.Called()

	var r0 <-chan frizzle.Msg
	if rf, ok := ret.Get(0).(func() <-chan frizzle.Msg); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan frizzle.Msg)
		}
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Source) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnAcked provides a mock function with given fields:
func (_m *Source) UnAcked() []frizzle.Msg {
	ret := _m.Called()

	var r0 []frizzle.Msg
	if rf, ok := ret.Get(0).(func() []frizzle.Msg); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]frizzle.Msg)
		}
	}

	return r0
}
